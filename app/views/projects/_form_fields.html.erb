<div class="form-inputs">
  <div class="row well">
    <div class="col-md-12">
      <%= content_tag :h1, Project.model_name.human, class: 'form-subtitle' %>
      <%= show_simple_base_errors(f) %>
      <div class="row">
        <%= f.input :project_type_id, as: :hidden %>
        <div class="col-md-6">
          <%= f.input :name %>
        </div>
        <div class="col-md-6">
          <%= f.input :active unless f.object.new_record? %>
          <%= f.input :volunteers_allowed %>
          <%= f.input :publish %>
          <%= f.input :outstanding %>
        </div>
      </div>
      <div class="row">
        <%= f.input :description, wrapper_html: { class: 'col-md-6' } %>
        <%= f.input :comments, wrapper_html: { class: 'col-md-6' } %>
      </div>
    </div>
  </div>
  <div class="row well row-2">
    <%= content_tag :h1, Volunteer.model_name.human(count: 2), class: 'form-subtitle' %>
    <div class="col-md-6">
      <%= f.input :volunteers_num, as: :string, placeholder: '0', input_html: {class: 'm-width150', min: 0, max: 5} %>
      <%= f.input :participants_num, as: :string, placeholder: '0', input_html: {class: 'm-width150', min: 0, max: 5} %>
      <%= f.input :beneficiaries_num, as: :string, placeholder: '0', input_html: {class: 'm-width150', min: 0, max: 5} %>
    </div>
    <div class="col-md-6">
      <%= f.input :functions, as: :text %>
    </div>
  </div>
  <div class="row well row-2">
    <%= content_tag :h1, t('contact_person'), class: 'form-subtitle' %>
    <div class="col-md-6">
      <%= f.input :contact_name %>
      <%= f.input :contact_last_name %>
      <%= f.input :contact_last_name_alt %>
    </div>
    <div class="col-md-6">
      <%= f.input :email, placeholder: 'email@email.com', input_html: {class: 'm-width250'} %>
      <%= f.input :phone_number, input_html: { class: 'm-width150', data: { mask: '999999999'} }  %>
      <%= f.association :entity, input_html: { class: 'm-width200' } %>
    </div>
  </div>
  <div class="row well row-3">
      <%= content_tag :h1, 'Fechas de ejecuciÃ³n', class: 'form-subtitle' %>
      <%= f.input :execution_start_date, as: :string, input_html: date_input_html_default_values(f.object.execution_start_date), wrapper_html: { class: 'col-md-6' } %>
      <%= f.input :execution_end_date, as: :string, input_html: date_input_html_default_values(f.object.execution_end_date), wrapper_html: { class: 'col-md-6' } %>
  </div>
  <div class="row well row-3">
    <%= content_tag :h1, 'Datos del seguro', class: 'form-subtitle' %>
      <%= f.input :insured, wrapper_html: { class: 'col-md-6' } %>
      <%= f.input :insurance_date, as: :string, input_html: date_input_html(f.object.insurance_date), wrapper_html: { class: 'col-md-6' } %>
      <%= f.simple_fields_for :documents do |f_document|  %>
          <%= f_document.input :name, label: Document.model_name.human %>
      <% end %>
  </div>
  <div class="events-block row row-4 well">
    <%= content_tag :h1, "#{Address.model_name.human(count: 2)} #{t('and')} #{Timetable.model_name.human(count: 2)}", class: 'form-subtitle' %>
      
      <input type="hidden" value="<%= f.object.events.count %>" id="eventsNum" />
      <%= f.simple_fields_for :events, (f.object.events.build if f.object.events.empty?) do |f_event|  %>
        <div class="event-fields well col-md-12">
        <%= content_tag :h2, "#{Address.model_name.human} #{t('and')} #{Timetable.model_name.human(count: 2)}", class: 'form-subtitle' %>

          <div class="address-block row well">
            <%= content_tag :h3, Address.model_name.human, class: 'form-subtitle' %>
            <%= f_event.simple_fields_for :address, (f_event.object.build_address if f_event.object.address.blank?) do |f_address|  %>
              <%= show_simple_base_errors(f_address) %>
              <div class="address-fields col-md-12">
                <div class="row row-4-1">
                  <% no_bdc_check  = cast_as_boolean(f_address.object.no_bdc_check) %>
                  <% hide          = !no_bdc_check%>
                  <%= f_address.input :no_bdc_check, as: :boolean, input_html: { class: 'js-no_bdc_check', value: no_bdc_check }, wrapper_html: { class: 'pull-right col-md-3' } %>
                </div>
              </div>
              <div class="address-fields col-md-12">
                <div class="row row-4-1">
                    <%= f_address.input :country, as: :string,  input_html: { value: (f_address.object.country || Setting['default_country']), readonly: true, class: 'js-country' }, wrapper_html: { class: 'col-md-3' } %>
                    <%= f_address.input :province, input_html: { value: (f_address.object.province || Setting['default_province']), readonly: true, class: 'js-province' }, wrapper_html: { class: 'col-md-4' } %>
                    <%= f_address.input :town, input_html: { class: 'js-town' }, wrapper_html: { class: 'col-md-5' } %>
                </div>
                <div class="row row-4-1">
                    <%= f_address.input :road_type, collection: Setting.road_types, input_html: { readonly: true }, wrapper_html: { class: 'col-md-3 js-road_type' } %>
                    <%= f_address.input :road_name, input_html: { class: 'js-road_name' }, wrapper_html: { class: 'road_name col-md-9' } %>
                </div>
                <div class="row row-4-2">
                  <%= f_address.input :road_number_type, input_html: { class: 'm-width250 js-road_number_type', readonly: hide }, wrapper_html: { class: 'col-md-3' } %>
                  <%= f_address.input :road_number, collection: [f_address.object.road_number || ''], input_html: { class: 'm-width250 js-road_number-select', disabled: !hide }, wrapper_html: { class: 'col-md-3 js-road_number-select-wrapper', hidden: !hide } %>
                  <%= f_address.input :road_number, input_html: { class: 'm-width250 js-road_number-input', disabled: hide }, wrapper_html: { class: 'col-md-3 js-road_number-input-wrapper', hidden: hide } %>
                  <%= f_address.input :grader, input_html: { class: 'm-width80 js-grader', readonly: hide }, wrapper_html: { class: 'col-md-3' } %>
                  <%= f_address.input :postal_code, input_html: { class: 'js-postal_code', readonly: hide, data: { mask: '99999'} }, wrapper_html: { class: 'postal_code col-md-3' } %>
                </div>
                <div class="row row-4-3">
                    <%= f_address.input :stairs, input_html: { class: 'm-width250 js-stairs' }, wrapper_html: { class: 'col-md-3' } %>
                    <%= f_address.input :floor, input_html: { class: 'm-width250 js-floor' }, wrapper_html: { class: 'col-md-3' } %>
                    <%= f_address.input :door, input_html: { class: 'm-width250 js-door' }, wrapper_html: { class: 'col-md-3' } %>
                </div>
              </div> <!-- address-fields -->
            <% end %>
          </div> <!-- address-block -->

          <div class="timetables_block row well">
            <%= content_tag :h3, Timetable.model_name.human(count: 2), class: 'form-subtitle' %>
              <%= f_event.error :base, class: 'alert alert-danger alert-dismissable' %>
              <%= f_event.simple_fields_for :timetables, (f_event.object.timetables.build if f_event.object.timetables.empty?) do |f_timetable|  %>
                <div class="timetable-fields well col-md-12">
                  <div class="row">
                      <%= f_timetable.input :execution_date, as: :string, input_html: date_input_html_default_values(f_timetable.object.execution_date), wrapper_html: { class: 'col-md-4' } %>
                      <%= f_timetable.input :start_hour, input_html: { class: 'm-width70', data: { mask: '99:99'} }, wrapper_html: { class: 'col-md-4' } %>
                      <%= f_timetable.input :end_hour, input_html: { class: 'm-width70', data: { mask: '99:99'} }, wrapper_html: { class: 'col-md-4' } %>
                      <%= f_timetable.link_to_remove build_icon('trash-o', text: "#{Timetable.model_name.human}"), class: 'pull-right' %>
                  </div> <!-- timetable-fields -->
                </div>
              <% end %>
            <p><%= f_event.link_to_add icon_new(text: "#{Timetable.model_name.human}"), :timetables, class: 'btn' %></p>
          </div> <!-- timetables_block -->
          
          <p><%= f_event.link_to_remove build_icon('trash-o', text: "#{t('action.remove')} #{Address.model_name.human} #{t('and')} #{Timetable.model_name.human(count: 2)}"), class: 'pull-right', id: 'rmEvent', onclick: 'rmEvent();' %></p>
        </div> <!-- event-fields -->
      <% end %>
    <p><%= f.link_to_add icon_new(text: "#{t('action.add')} #{Address.model_name.human} #{t('and')} #{Timetable.model_name.human(count: 2)}"), :events, class: 'btn', id: 'addEvent', onclick: 'addEvent();' %></p>
    
  </div> <!-- events-block -->

  <div class="row">
    <div class="well col-md-12">
      <%= content_tag :h3, Area.model_name.human(count: 2), class: 'form-subtitle' %>
      <%= f.association :areas, as: :check_boxes, label: false, item_wrapper_class: 'checkbox-inline checkbox-custom' %>
      <div class='col-sm-12'>
        <% f.object.inactive_areas.each do |area| %>
          <span class='checkbox-inline checkbox-custom'>
            <%= check_box_tag(area.name, value = "1", checked = true, options = { :disabled => true }) %>
            <label style='font-weight: normal;'>
              <%= area.name %>
            </label>
          </span>
        <% end %>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="well col-md-12">
      <%= content_tag :h3, Collective.model_name.human(count: 2), class: 'form-subtitle' %>
      <%= f.association :collectives, as: :check_boxes, label: false, item_wrapper_class: 'checkbox-inline checkbox-custom' %>
      <div class='col-sm-12'>
        <% f.object.inactive_collectives.each do |collective| %>
          <span class='checkbox-inline checkbox-custom'>
            <%= check_box_tag(collective.name, value = "1", checked = true, options = { :disabled => true }) %>
            <label style='font-weight: normal;'>
              <%= collective.name %>
            </label>
          </span>
        <% end %>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="well col-md-12">
      <%= content_tag :h3, Coordination.model_name.human(count: 2), class: 'form-subtitle' %>
      <%= f.association :coordinations, as: :check_boxes, label: false, item_wrapper_class: 'checkbox-inline checkbox-custom' %>
      <div class='col-sm-12'>
        <% f.object.inactive_coordinations.each do |coordination| %>
          <span class='checkbox-inline checkbox-custom'>
            <%= check_box_tag(coordination.name, value = "1", checked = true, options = { :disabled => true }) %>
            <label style='font-weight: normal;'>
              <%= coordination.name %>
            </label>
          </span>
        <% end %>
      </div>
    </div>
  </div>
</div>



<!-- TODO Pending of refactoring and adapting addresses and timetables form to the new model design  -->
<script>

// Preventing destroy events when only one
    var eventsNum = $("#eventsNum").val();
    
    if (eventsNum < 2) {
      $("#rmEvent").hide();
    }
    
    function addEvent() {
      eventsNum++;
      $("#rmEvent").show();
    }
    
    function rmEvent() {
      eventsNum--;
      if (eventsNum < 2) {
        $("#rmEvent").hide();
      }
    }


// Toggle "readonly" prop for blocked address fields
$(document).on('ready', function() {
    // Prevent road type select from opening
    $('.js-road_type select').on('mousedown', function(e) {
        if (!$(this).closest('.address-block').find('.js-no_bdc_check').is(':checked')){
            e.preventDefault();
            this.blur();
            window.focus();
        }
    });

    var blocked_fields = ['.js-road_number_type', '.js-road_type select', '.js-grader', '.js-postal_code'];
    $(document).on('change', '.js-no_bdc_check', function () {
        var $address = $(this).closest('.address-block');

        if ($(this).is(':checked')){
            blocked_fields.forEach(function (field_selector, index) {
                $address.find(field_selector).removeAttr('readonly');
            });
            $('.js-road_number-select-wrapper').attr('hidden', 'hidden');
            $('.js-road_number-select').attr('disabled', 'disabled');
            $('.js-road_number-input-wrapper').removeAttr('hidden');
            $('.js-road_number-input').removeAttr('disabled');
        }else{
            blocked_fields.forEach(function (field_selector, index) {
                $address.find(field_selector).attr('readonly', 'readonly');
            });
            $('.js-road_number-select-wrapper').removeAttr('hidden');
            $('.js-road_number-select').removeAttr('disabled');
            $('.js-road_number-input-wrapper').attr('hidden', 'hidden');
            $('.js-road_number-input').attr('disabled', 'disabled');
        }
    });
});

// AUTOCOMPLETE TOWN
$(function() {
    function log1($townInput, message) {
        $townInput.scrollTop(0);
        $townInput.val(message);
    }

    $.each($(".address-block"), function(i, address){
        var $address = $(address);
        var $input = $address.find(".js-town")
        $input.autocomplete({
            source: function(request, response) {
                if ($address.find('.js-no_bdc_check').is(':checked')) { return response({}) };

                var value = $.trim($input.val());
                if(value.length > 0){
                    $.ajax({
                        url: "<%= bdc_search_towns_addresses_path %>",
                        dataType: "json",
                        data: {
                            address: {
                                country: $address.find(".js-country").val(),
                                province: $address.find(".js-province").val(),
                                town: $address.find(".js-town").val(),
                                road_type: $address.find(".js-road_type option:selected").val(),
                                road_name: $address.find(".js-road_name").val(),
                                road_number_type: $address.find(".js-road_number_type").val(),
                                road_number: $address.find(".js-road_number").val(),
                                grader: $address.find(".js-grader").val(),
                                stairs: $address.find(".js-stairs").val(),
                                floor: $address.find(".js-floor").val(),
                                door: $address.find(".js-door").val()
                            },
                        },
                        success: function(data) {
                            response(data.towns);
                        }
                    });
                }
            },
            minLength: 3,
            select: function(event, ui) {
                log1($(this), ui.item ? ui.item.label : "Nothing selected, input was " + this.value);
            },
            open: function() {
            },
            close: function() {
                $('.ui-autocomplete-loading').removeClass('ui-autocomplete-loading');
                $address = $(this).closest(".address-block");
                $address.find(".js-road_type select").prop('selectedIndex',0);
                $address.find(".js-road_name").val('');
                $address.find(".js-road_number_type").val('');
                $address.find(".js-road_number-select").prop('selectedIndex',0);
                $address.find(".js-grader").val('');
                $address.find(".js-postal_code").val('');
            }
        });
    });
});

// AUTOCOMPLETE ROAD NAME
$(function() {
    var roads;
    function log2($roadNameInput, message) {
        $roadNameInput.scrollTop(0);
        var roadName = message.split(" (")[0];
        var roadTypeName = message.split(" (")[1].replace(/\)/, "");
        var selectedRoad = roads.filter(function(road) {
            return ( road.nomvial == roadName && road.nomclase == roadTypeName );
        })[0];

        if (typeof selectedRoad !== 'undefined') {
            $roadNameInput.closest(".address-block").find(".js-road_type option").filter(function() {
                return $(this).text().toLowerCase() == selectedRoad.nomclase.toLowerCase();
            }).prop('selected', true);
        }
    }

    $.each($(".address-block"), function(i, address){
        var $address = $(address);
        if ($address.find('.js-no_bdc_check').is(':checked')) { return };

        $address.find(".js-road_name").autocomplete({
            source: function(request, response) {
                if ($address.find('.js-no_bdc_check').is(':checked')) { return response({}) };

                var value = $.trim($address.find(".js-town").val());
                if(value.length > 0) {
                    $.ajax({
                        url: "<%= bdc_search_roads_addresses_path %>",
                        dataType: "json",
                        data: {
                            address: {
                                country: $address.find(".js-country").val(),
                                province: $address.find(".js-province").val(),
                                town: $address.find(".js-town").val(),
                                road_type: '',
                                road_name: $address.find(".js-road_name").val(),
                                road_number_type: $address.find(".js-road_number_type").val(),
                                road_number: $address.find(".js-road_number-input").val(),
                                grader: $address.find(".js-grader").val(),
                                stairs: $address.find(".js-stairs").val(),
                                floor: $address.find(".js-floor").val(),
                                door: $address.find(".js-door").val()
                            },
                        },
                        success: function (data) {
                            roads = data.roads;
                            if (roads.length > 0){
                                var roadList = [];
                                $.each(roads, function (index, road) {
                                    roadList.push(road.nomvial + ' (' + road.nomclase + ')');
                                });
                                response(roadList);

                            }else{
                                _$address3 = $address
                                $address.find(".js-road_number_type").val('');
                                $address.find(".js-grader").val('');
                                $address.find(".js-postal_code").val('');
                                $address.find(".js-road_number-input").val('');
                                response({})
                            }
                        }
                    });
                }else{
                    alert('El campo "PoblaciÃ³n" no puede estar vacÃ­o');
                    response({});
                }
            },
            minLength: 3,
            select: function(event, ui) {
                log2($(this), ui.item ? ui.item.label : "Nothing selected, input was " + this.value);
            },
            open: function() {
            },
            close: function() {
                $('.ui-autocomplete-loading').removeClass('ui-autocomplete-loading');
                $input = $(this);
                value = $input.val();
                $input.val(value.replace(/\s*\(\w*\)/, ""));
                $address = $input.closest(".address-block");
                $address.find(".js-road_number_type").val('');
                $address.find(".js-grader").val('');
                $address.find(".js-postal_code").val('');
                $address.find(".js-road_number-input").val('');


                // AUTOCOMPLETE ROAD NUMBER
                var value = $.trim($address.find(".js-road_name").val());
                if(value.length > 0) {
                    $.ajax({
                        url: "<%= bdc_search_road_numbers_addresses_path %>",
                        dataType: "json",
                        data: {
                            address: {
                                country: $address.find(".js-country").val(),
                                province: $address.find(".js-province").val(),
                                town: $address.find(".js-town").val(),
                                road_type: $address.find(".js-road_type option:selected").val(),
                                road_name: $address.find(".js-road_name").val(),
                            }
                        },
                        success: function (data) {
                            var numbers = data.numbers;
                            var numbersList = [];
                            $.each(numbers, function (index, number) {
                                if (number.calapp == null)
                                    numbersList.push(number.numapp)
                                else
                                    numbersList.push(number.numapp + ' (' + number.calapp + ')')
                            });
                            var selectArr = numbersList.map(function(elem){ return {val: elem, text: elem}});
                            var $roadNumberSelect = $('.js-road_number-select');
                            $roadNumberSelect.find('option').remove();
                            $roadNumberSelect.append($("<option>").attr('value', '').text(''));
                            $(selectArr).each(function() {
                                $roadNumberSelect.append($("<option>").attr('value',this.val).text(this.text));
                            });
                            $roadNumberSelect.removeAttr('readonly');
                            $roadNumberSelect.change(function(){
                                var selectedNumberOption = $(this).prop('value');
                                if (selectedNumberOption.indexOf("(") >= 0){
                                    var numberName = selectedNumberOption.split(" (")[0];
                                    var graderName = selectedNumberOption.split(" (")[1].replace(/\)/, "");
                                }else{
                                    var numberName = selectedNumberOption;
                                    var graderName = null;
                                }
                                $address = $(this).closest('.address-block');
                                $.ajax({
                                    url: "<%= bdc_search_road_numbers_addresses_path %>",
                                    dataType: "json",
                                    data: {
                                        address: {
                                            country: $address.find(".js-country").val(),
                                            province: $address.find(".js-province").val(),
                                            town: $address.find(".js-town").val(),
                                            road_type: $address.find(".js-road_type option:selected").val(),
                                            road_name: $address.find(".js-road_name").val(),
                                            road_number: numberName,
                                            grader: graderName,
                                        }
                                    },
                                    success: function (data) {
                                        var numbers = data.numbers;
                                        var selectedNumber = numbers.filter(function(number) {
                                            return ( number.numapp.toLowerCase() == numberName.toLowerCase() && number.calapp == graderName );
                                        })[0];

                                        if (typeof selectedNumber === 'undefined') {
                                            selectedNumber = numbers.filter(function (number) {
                                                return ( number.numapp.toLowerCase() == numberName.toLowerCase());
                                            })[0];
                                        }

                                        $address.find(".js-road_number_type").val(selectedNumber.nomapp);
                                        var graderValue = (selectedNumber.calapp != null) ? selectedNumber.calapp : '  ';
                                        $address.find(".js-grader").val(graderValue);
                                        $address.find('.js-postal_code').val(selectedNumber.codpostal)
                                    }
                                });
                            });

                        },
                        error: function () {
                        }
                    });
                }else{
                    alert('El campo "Nombre de la vÃ­a" no puede estar vacÃ­o');
                }
            }
        });
    });
});


    // ALLOW AUTOCOMPLE AFTER ADDING A NEW ADDRESS BLOCK
    $(document).on('nested:fieldAdded', function(event){
        // Toggle "readonly" prop for blocked address fields
        $(document).on('ready', function() {
            // Prevent road type select from opening
            $('.js-road_type select').on('mousedown', function(e) {
                if (!$(this).closest('.address-block').find('.js-no_bdc_check').is(':checked')){
                    e.preventDefault();
                    this.blur();
                    window.focus();
                }
            });

            var blocked_fields = ['.js-road_number_type', '.js-road_type select', '.js-grader', '.js-postal_code'];
            $(document).on('change', '.js-no_bdc_check', function () {
                var $address = $(this).closest('.address-block');

                if ($(this).is(':checked')){
                    blocked_fields.forEach(function (field_selector, index) {
                        $address.find(field_selector).removeAttr('readonly');
                    });
                    $('.js-road_number-select-wrapper').attr('hidden', 'hidden');
                    $('.js-road_number-select').attr('disabled', 'disabled');
                    $('.js-road_number-input-wrapper').removeAttr('hidden');
                    $('.js-road_number-input').removeAttr('disabled');
                }else{
                    blocked_fields.forEach(function (field_selector, index) {
                        $address.find(field_selector).attr('readonly', 'readonly');
                    });
                    $('.js-road_number-select-wrapper').removeAttr('hidden');
                    $('.js-road_number-select').removeAttr('disabled');
                    $('.js-road_number-input-wrapper').attr('hidden', 'hidden');
                    $('.js-road_number-input').attr('disabled', 'disabled');
                }
            });
        });

        // AUTOCOMPLETE TOWN
        $(function() {
            function log1($townInput, message) {
                $townInput.scrollTop(0);
                $townInput.val(message);
            }

            $.each($(".address-block"), function(i, address){
                var $address = $(address);
                var $input = $address.find(".js-town")
                $input.autocomplete({
                    source: function(request, response) {
                        if ($address.find('.js-no_bdc_check').is(':checked')) { return response({}) };

                        var value = $.trim($input.val());
                        if(value.length > 0){
                            $.ajax({
                                url: "<%= bdc_search_towns_addresses_path %>",
                                dataType: "json",
                                data: {
                                    address: {
                                        country: $address.find(".js-country").val(),
                                        province: $address.find(".js-province").val(),
                                        town: $address.find(".js-town").val(),
                                        road_type: $address.find(".js-road_type option:selected").val(),
                                        road_name: $address.find(".js-road_name").val(),
                                        road_number_type: $address.find(".js-road_number_type").val(),
                                        road_number: $address.find(".js-road_number").val(),
                                        grader: $address.find(".js-grader").val(),
                                        stairs: $address.find(".js-stairs").val(),
                                        floor: $address.find(".js-floor").val(),
                                        door: $address.find(".js-door").val()
                                    },
                                },
                                success: function(data) {
                                    response(data.towns);
                                }
                            });
                        }
                    },
                    minLength: 3,
                    select: function(event, ui) {
                        log1($(this), ui.item ? ui.item.label : "Nothing selected, input was " + this.value);
                    },
                    open: function() {
                    },
                    close: function() {
                        $('.ui-autocomplete-loading').removeClass('ui-autocomplete-loading');
                        $address = $(this).closest(".address-block");
                        $address.find(".js-road_type select").prop('selectedIndex',0);
                        $address.find(".js-road_name").val('');
                        $address.find(".js-road_number_type").val('');
                        $address.find(".js-road_number-select").prop('selectedIndex',0);
                        $address.find(".js-grader").val('');
                        $address.find(".js-postal_code").val('');
                    }
                });
            });
        });

        // AUTOCOMPLETE ROAD NAME
        $(function() {
            var roads;
            function log2($roadNameInput, message) {
                $roadNameInput.scrollTop(0);
                var roadName = message.split(" (")[0];
                var roadTypeName = message.split(" (")[1].replace(/\)/, "");
                var selectedRoad = roads.filter(function(road) {
                    return ( road.nomvial == roadName && road.nomclase == roadTypeName );
                })[0];

                if (typeof selectedRoad !== 'undefined') {
                    $roadNameInput.closest(".address-block").find(".js-road_type option").filter(function() {
                        return $(this).text().toLowerCase() == selectedRoad.nomclase.toLowerCase();
                    }).prop('selected', true);
                }
            }

            $.each($(".address-block"), function(i, address){
                var $address = $(address);
                if ($address.find('.js-no_bdc_check').is(':checked')) { return };

                $address.find(".js-road_name").autocomplete({
                    source: function(request, response) {
                        if ($address.find('.js-no_bdc_check').is(':checked')) { return response({}) };

                        var value = $.trim($address.find(".js-town").val());
                        if(value.length > 0) {
                            $.ajax({
                                url: "<%= bdc_search_roads_addresses_path %>",
                                dataType: "json",
                                data: {
                                    address: {
                                        country: $address.find(".js-country").val(),
                                        province: $address.find(".js-province").val(),
                                        town: $address.find(".js-town").val(),
                                        road_type: '',
                                        road_name: $address.find(".js-road_name").val(),
                                        road_number_type: $address.find(".js-road_number_type").val(),
                                        road_number: $address.find(".js-road_number-input").val(),
                                        grader: $address.find(".js-grader").val(),
                                        stairs: $address.find(".js-stairs").val(),
                                        floor: $address.find(".js-floor").val(),
                                        door: $address.find(".js-door").val()
                                    },
                                },
                                success: function (data) {
                                    roads = data.roads;
                                    if (roads.length > 0){
                                        var roadList = [];
                                        $.each(roads, function (index, road) {
                                            roadList.push(road.nomvial + ' (' + road.nomclase + ')');
                                        });
                                        response(roadList);

                                    }else{
                                        _$address3 = $address
                                        $address.find(".js-road_number_type").val('');
                                        $address.find(".js-grader").val('');
                                        $address.find(".js-postal_code").val('');
                                        $address.find(".js-road_number-input").val('');
                                        response({})
                                    }
                                }
                            });
                        }else{
                            alert('El campo "PoblaciÃ³n" no puede estar vacÃ­o');
                            response({});
                        }
                    },
                    minLength: 3,
                    select: function(event, ui) {
                        log2($(this), ui.item ? ui.item.label : "Nothing selected, input was " + this.value);
                    },
                    open: function() {
                    },
                    close: function() {
                        $('.ui-autocomplete-loading').removeClass('ui-autocomplete-loading');
                        $input = $(this);
                        value = $input.val();
                        $input.val(value.replace(/\s*\(\w*\)/, ""));
                        $address = $input.closest(".address-block");
                        $address.find(".js-road_number_type").val('');
                        $address.find(".js-grader").val('');
                        $address.find(".js-postal_code").val('');
                        $address.find(".js-road_number-input").val('');


                        // AUTOCOMPLETE ROAD NUMBER
                        var value = $.trim($address.find(".js-road_name").val());
                        if(value.length > 0) {
                            $.ajax({
                                url: "<%= bdc_search_road_numbers_addresses_path %>",
                                dataType: "json",
                                data: {
                                    address: {
                                        country: $address.find(".js-country").val(),
                                        province: $address.find(".js-province").val(),
                                        town: $address.find(".js-town").val(),
                                        road_type: $address.find(".js-road_type option:selected").val(),
                                        road_name: $address.find(".js-road_name").val(),
                                    }
                                },
                                success: function (data) {
                                    var numbers = data.numbers;
                                    var numbersList = [];
                                    $.each(numbers, function (index, number) {
                                        if (number.calapp == null)
                                            numbersList.push(number.numapp)
                                        else
                                            numbersList.push(number.numapp + ' (' + number.calapp + ')')
                                    });
                                    var selectArr = numbersList.map(function(elem){ return {val: elem, text: elem}});
                                    var $roadNumberSelect = $('.js-road_number-select');
                                    $roadNumberSelect.find('option').remove();
                                    $roadNumberSelect.append($("<option>").attr('value', '').text(''));
                                    $(selectArr).each(function() {
                                        $roadNumberSelect.append($("<option>").attr('value',this.val).text(this.text));
                                    });
                                    $roadNumberSelect.removeAttr('readonly');
                                    $roadNumberSelect.change(function(){
                                        var selectedNumberOption = $(this).prop('value');
                                        if (selectedNumberOption.indexOf("(") >= 0){
                                            var numberName = selectedNumberOption.split(" (")[0];
                                            var graderName = selectedNumberOption.split(" (")[1].replace(/\)/, "");
                                        }else{
                                            var numberName = selectedNumberOption;
                                            var graderName = null;
                                        }
                                        $address = $(this).closest('.address-block');
                                        $.ajax({
                                            url: "<%= bdc_search_road_numbers_addresses_path %>",
                                            dataType: "json",
                                            data: {
                                                address: {
                                                    country: $address.find(".js-country").val(),
                                                    province: $address.find(".js-province").val(),
                                                    town: $address.find(".js-town").val(),
                                                    road_type: $address.find(".js-road_type option:selected").val(),
                                                    road_name: $address.find(".js-road_name").val(),
                                                    road_number: numberName,
                                                    grader: graderName,
                                                }
                                            },
                                            success: function (data) {
                                                var numbers = data.numbers;
                                                var selectedNumber = numbers.filter(function(number) {
                                                    return ( number.numapp.toLowerCase() == numberName.toLowerCase() && number.calapp == graderName );
                                                })[0];

                                                if (typeof selectedNumber === 'undefined') {
                                                    selectedNumber = numbers.filter(function (number) {
                                                        return ( number.numapp.toLowerCase() == numberName.toLowerCase());
                                                    })[0];
                                                }

                                                $address.find(".js-road_number_type").val(selectedNumber.nomapp);
                                                var graderValue = (selectedNumber.calapp != null) ? selectedNumber.calapp : '  ';
                                                $address.find(".js-grader").val(graderValue);
                                                $address.find('.js-postal_code').val(selectedNumber.codpostal)
                                            }
                                        });
                                    });

                                },
                                error: function () {
                                }
                            });
                        }else{
                            alert('El campo "Nombre de la vÃ­a" no puede estar vacÃ­o');
                        }
                    }
                });
            });
        });
    })

</script>
